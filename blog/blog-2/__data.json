{"type":"data","nodes":[null,{"type":"data","data":[{"blogNum":1,"markdown":2,"icon":3,"markdownHTML":4,"metadata":5},"2","---\nshortSummary: Building something that works, and then expanding it\nauthor: River / Aditya Shankar\ndated: 2024-12-27\ntitle: Building something that works, and then expanding it\nicon: icon.jpg\n---\n\n## Building something that works, and then work on expanding it\n\nNow this is a generalization, and like all generalizations, it's not always true, but a thing that gets me excited to \"complete\" projects is to build something really tiny that works\n\nand then work on making it better\n\nnot a \"proof of concept\" but like the \"proof of concept of the proof of concept\", building the tiniest, most important part of the project that works, and then expanding it\n\n- Now you have the motivation for the project, and you have the smallest part that works ¯\\_(ツ)_/¯\n\nHowever, this does not mean compromising on the \"expandability\" of the project,\n\nSo essentially, for me, for example, perhaps when I go into the project I would recognize that eventually I would want to make a mobile app out of it, so it's still a better idea to start with react native, and then work on the web app, and then work on the mobile app\n\nsince rewriting the codebase from scratch here would be incredibly exhausting\n\nStarting with typescript/jest and probably the \"most advanced stack\" can probably better early on, than having to add everything later and have it break because it just doesn't work\n\nsome tips on this\n\n- Starter templates are AWESOME and save a lot of time to everyone involved\n   - https://createexpostack.com/ is my goto here\n\n- Don't focus on perfection, everyone makes mistakes\n\n- Everything is a compromise and there are no perfect rules to adhere to here\n\nLastly, this does not mean writing bad code, ([I tend of think of bad code as complex code](https://minds.md/zakirullin/cognitive)), you still take a step back, maybe take a pen and paper, draw a diagram and think about how your codebase is gonna work so the next person (or when you in the future are reading it) can still understand it\n\n","/_app/immutable/assets/icon.CAI01ZNa.jpg","\u003Ch2 id=\"buildingsomethingthatworksandthenworkonexpandingit\">Building something that works, and then work on expanding it\u003C/h2>\n\u003Cp>Now this is a generalization, and like all generalizations, it's not always true, but a thing that gets me excited to \"complete\" projects is to build something really tiny that works\u003C/p>\n\u003Cp>and then work on making it better\u003C/p>\n\u003Cp>not a \"proof of concept\" but like the \"proof of concept of the proof of concept\", building the tiniest, most important part of the project that works, and then expanding it\u003C/p>\n\u003Cul>\n\u003Cli>Now you have the motivation for the project, and you have the smallest part that works ¯_(ツ)_/¯\u003C/li>\n\u003C/ul>\n\u003Cp>However, this does not mean compromising on the \"expandability\" of the project,\u003C/p>\n\u003Cp>So essentially, for me, for example, perhaps when I go into the project I would recognize that eventually I would want to make a mobile app out of it, so it's still a better idea to start with react native, and then work on the web app, and then work on the mobile app\u003C/p>\n\u003Cp>since rewriting the codebase from scratch here would be incredibly exhausting\u003C/p>\n\u003Cp>Starting with typescript/jest and probably the \"most advanced stack\" can probably better early on, than having to add everything later and have it break because it just doesn't work\u003C/p>\n\u003Cp>some tips on this\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cp>Starter templates are AWESOME and save a lot of time to everyone involved\u003C/p>\u003C/li>\n\u003Cli>\u003Cp>https://createexpostack.com/ is my goto here\u003C/p>\u003C/li>\n\u003Cli>\u003Cp>Don't focus on perfection, everyone makes mistakes\u003C/p>\u003C/li>\n\u003Cli>\u003Cp>Everything is a compromise and there are no perfect rules to adhere to here\u003C/p>\u003C/li>\n\u003C/ul>\n\u003Cp>Lastly, this does not mean writing bad code, (\u003Ca href=\"https://minds.md/zakirullin/cognitive\">I tend of think of bad code as complex code\u003C/a>), you still take a step back, maybe take a pen and paper, draw a diagram and think about how your codebase is gonna work so the next person (or when you in the future are reading it) can still understand it\u003C/p>",{"shortSummary":6,"author":7,"dated":8,"title":6,"icon":9},"Building something that works, and then expanding it","River / Aditya Shankar","2024-12-27","icon.jpg"],"uses":{"params":["num"]}}]}
