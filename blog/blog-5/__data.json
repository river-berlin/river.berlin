{"type":"data","nodes":[null,{"type":"data","data":[{"blogNum":1,"markdown":2,"icon":3,"markdownHTML":4,"metadata":5},"5","---\nshortSummary: Why I feel Svelte is better than React (it's state management)\nauthor: River / Aditya Shankar\ndated: 2025-05-24\ntitle: Why I feel Svelte is better than React (it's state management)\nicon: icon.jpg\n---\n\n## Why I feel Svelte is better than React (it's state management)\n\nThe developer experience of svelte is miles better than react, apart from pre-planned request layout structures and less cognitive work on that area\n\nAnd that's it, React projects get into state-hell very easily, and then users are forced to use alternative options such as https://github.com/pmndrs/zustand or https://jotai.org/\n\nThis is due to the fact that react by default does not have any \"Global state storage\" by default, so unless you are relying on the above mentioned libary – you likely will have to create a huge amount of inheritance and prop-drilling - which quickly gets messy and becomes a maintenance nightmare\n\nfor example, lets say you have a simple react function with children\n\n```tsx\nfunction App() {\n    return (\n        \u003Cdiv>\n            \u003Ch1>App\u003C/h1>\n            \u003CChild />\n        \u003C/div>\n    )\n}\n\nfunction Child() {\n    return (\n        \u003Cdiv>\n            \u003Ch2>Child\u003C/h2>\n        \u003C/div>\n    )\n}\n```\n\nand the way you use it is\n\n```tsx\nfunction App() {\n    const [count, setCount] = useState(0)\n    return (\n        \u003Cdiv>\n            \u003Ch1>App\u003C/h1>\n            \u003CChild count={count} setCount={setCount} />\n        \u003C/div>\n    )\n}\n```\n\n\nnow imagine doing this for a complex state driven project, it clearly doesn't work\n\n```tsx\nfunction App() {\n    const [count, setCount] = useState(0)\n    const [place, setPlace] = useState(\"alaska\")\n    const [name, setName] = useState(\"river\")\n    // 30 different states to load from\n    \n    // 30 different props to pass down\n    \u003CUserRepresentation count={count} setCount={setCount}, place={place} setPlace={setPlace}, name={name} setName={setName} />\n}\n```\n\nThis is probably not a \"realistic\" example, but in a practical sense, it is a nightmare to manage\n\nSo people turn to other libraries like zustand\n\nhere you use something similar to\n\n\n\n```tsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return \u003Ch1>{bears} around here ...\u003C/h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return \u003Cbutton onClick={increasePopulation}>one up\u003C/button>\n}\n``` \n\nThis is indeed better, since it makes the stores \"global\" instead of something chained down\n\n\nSvelte manages this via svelte stores, which I feel are alot alot more intuitive, and because they come pre-packaged in svelte, it is one less additional library to use\n\n```svelte\nimport {writable} from 'svelte/store'\n\nlet count = writable(0)\n\nfunction increment() {\n    count.update((value) => value + 1)\n}\n```\n\nand when using them in html, you can use the $ prefix to access the store\n\n```svelte\n\u003Ch1>{$count}\u003C/h1>\n\u003Cbutton on:click={increment}>Increment\u003C/button>\n```\n\nthat's it, ta-da!\n\nTo be honest, I do like jot-ai atoms which come close to this, but I didn't enjoy having to learn jot-ai to use it, and I don't enjoy the \"useAtom\" syntax\n\nHere's an example of jot-ai atoms for completeness's sake\n\n```tsx\nimport { atom } from \"jotai\"\n\nconst countAtom = atom(0)\n\nfunction increment() {\n    countAtom.update((value) => value + 1)\n}\n```\n\nto use this in a react component\n\n```tsx\nimport { useAtom } from \"jotai\"\n\nfunction App() {\n    const [count, setCount] = useAtom(countAtom)\n    return (\n        \u003Cdiv>\n            \u003Ch1>{count}\u003C/h1>\n            \u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n        \u003C/div>\n    )\n}\n````\n\n\n","/_app/immutable/assets/icon.CapEkUyB.jpg","\u003Ch2 id=\"whyifeelsvelteisbetterthanreactitsstatemanagement\">Why I feel Svelte is better than React (it's state management)\u003C/h2>\n\u003Cp>The developer experience of svelte is miles better than react, apart from pre-planned request layout structures and less cognitive work on that area\u003C/p>\n\u003Cp>And that's it, React projects get into state-hell very easily, and then users are forced to use alternative options such as https://github.com/pmndrs/zustand or https://jotai.org/\u003C/p>\n\u003Cp>This is due to the fact that react by default does not have any \"Global state storage\" by default, so unless you are relying on the above mentioned libary – you likely will have to create a huge amount of inheritance and prop-drilling - which quickly gets messy and becomes a maintenance nightmare\u003C/p>\n\u003Cp>for example, lets say you have a simple react function with children\u003C/p>\n\u003Cpre>\u003Ccode class=\"tsx language-tsx\">function App() {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;App&lt;/h1&gt;\n            &lt;Child /&gt;\n        &lt;/div&gt;\n    )\n}\n\nfunction Child() {\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;Child&lt;/h2&gt;\n        &lt;/div&gt;\n    )\n}\n\u003C/code>\u003C/pre>\n\u003Cp>and the way you use it is\u003C/p>\n\u003Cpre>\u003Ccode class=\"tsx language-tsx\">function App() {\n    const [count, setCount] = useState(0)\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;App&lt;/h1&gt;\n            &lt;Child count={count} setCount={setCount} /&gt;\n        &lt;/div&gt;\n    )\n}\n\u003C/code>\u003C/pre>\n\u003Cp>now imagine doing this for a complex state driven project, it clearly doesn't work\u003C/p>\n\u003Cpre>\u003Ccode class=\"tsx language-tsx\">function App() {\n    const [count, setCount] = useState(0)\n    const [place, setPlace] = useState(\"alaska\")\n    const [name, setName] = useState(\"river\")\n    // 30 different states to load from\n\n    // 30 different props to pass down\n    &lt;UserRepresentation count={count} setCount={setCount}, place={place} setPlace={setPlace}, name={name} setName={setName} /&gt;\n}\n\u003C/code>\u003C/pre>\n\u003Cp>This is probably not a \"realistic\" example, but in a practical sense, it is a nightmare to manage\u003C/p>\n\u003Cp>So people turn to other libraries like zustand\u003C/p>\n\u003Cp>here you use something similar to\u003C/p>\n\u003Cpre>\u003Ccode class=\"tsx language-tsx\">import { create } from 'zustand'\n\nconst useBearStore = create((set) =&gt; ({\n  bears: 0,\n  increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),\n  removeAllBears: () =&gt; set({ bears: 0 }),\n}))\n\nfunction BearCounter() {\n  const bears = useBearStore((state) =&gt; state.bears)\n  return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) =&gt; state.increasePopulation)\n  return &lt;button onClick={increasePopulation}&gt;one up&lt;/button&gt;\n}\n\u003C/code>\u003C/pre>\n\u003Cp>This is indeed better, since it makes the stores \"global\" instead of something chained down\u003C/p>\n\u003Cp>Svelte manages this via svelte stores, which I feel are alot alot more intuitive, and because they come pre-packaged in svelte, it is one less additional library to use\u003C/p>\n\u003Cpre>\u003Ccode class=\"svelte language-svelte\">import {writable} from 'svelte/store'\n\nlet count = writable(0)\n\nfunction increment() {\n    count.update((value) =&gt; value + 1)\n}\n\u003C/code>\u003C/pre>\n\u003Cp>and when using them in html, you can use the $ prefix to access the store\u003C/p>\n\u003Cpre>\u003Ccode class=\"svelte language-svelte\">&lt;h1&gt;{$count}&lt;/h1&gt;\n&lt;button on:click={increment}&gt;Increment&lt;/button&gt;\n\u003C/code>\u003C/pre>\n\u003Cp>that's it, ta-da!\u003C/p>\n\u003Cp>To be honest, I do like jot-ai atoms which come close to this, but I didn't enjoy having to learn jot-ai to use it, and I don't enjoy the \"useAtom\" syntax\u003C/p>\n\u003Cp>Here's an example of jot-ai atoms for completeness's sake\u003C/p>\n\u003Cpre>\u003Ccode class=\"tsx language-tsx\">import { atom } from \"jotai\"\n\nconst countAtom = atom(0)\n\nfunction increment() {\n    countAtom.update((value) =&gt; value + 1)\n}\n\u003C/code>\u003C/pre>\n\u003Cp>to use this in a react component\u003C/p>\n\u003Cpre>\u003Ccode class=\"tsx language-tsx\">import { useAtom } from \"jotai\"\n\nfunction App() {\n    const [count, setCount] = useAtom(countAtom)\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{count}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\u003C/code>\u003C/pre>\n\u003Cp>`\u003C/p>",{"shortSummary":6,"author":7,"dated":8,"title":6,"icon":9},"Why I feel Svelte is better than React (it's state management)","River / Aditya Shankar","2025-05-24","icon.jpg"],"uses":{"params":["num"]}}]}
