{"type":"data","nodes":[null,{"type":"data","data":[{"blogNum":1,"markdown":2,"icon":3,"markdownHTML":4,"metadata":5},"5","---\nshortSummary: Why I feel Svelte is better than React (it's state management)\nauthor: River / Aditya Shankar\ndated: 2025-05-24\ntitle: Why I feel Svelte is better than React (it's state management)\nicon: icon.jpg\n---\n\n## Why I feel Svelte is better than React (it's state management)\n\nThe developer experience of svelte is miles better than react, apart from pre-planned request layout structures and less cognitive work on that area\n\nAnd that's it, React projects get into state-hell very easily, and then users are forced to use alternative options such as https://github.com/pmndrs/zustand or https://jotai.org/\n\nThis is due to the fact that react by default does not have any \"Global state storage\" by default, so unless you are relying on the above mentioned libary – you likely will have to create a huge amount of inheritance and prop-drilling - which quickly gets messy and becomes a maintenance nightmare\n\nfor example, lets say you have a simple react function with children\n\n```tsx\nfunction App() {\n    return (\n        \u003Cdiv>\n            \u003Ch1>App\u003C/h1>\n            \u003CChild />\n        \u003C/div>\n    )\n}\n\nfunction Child() {\n    return (\n        \u003Cdiv>\n            \u003Ch2>Child\u003C/h2>\n        \u003C/div>\n    )\n}\n```\n\nand the way you use it is\n\n```tsx\nfunction App() {\n    const [count, setCount] = useState(0)\n    return (\n        \u003Cdiv>\n            \u003Ch1>App\u003C/h1>\n            \u003CChild count={count} setCount={setCount} />\n        \u003C/div>\n    )\n}\n```\n\n\nnow imagine doing this for a complex state driven project, it clearly doesn't work\n\n```tsx\nfunction App() {\n    const [count, setCount] = useState(0)\n    const [place, setPlace] = useState(\"alaska\")\n    const [name, setName] = useState(\"river\")\n    // 30 different states to load from\n    \n    // 30 different props to pass down\n    \u003CUserRepresentation count={count} setCount={setCount}, place={place} setPlace={setPlace}, name={name} setName={setName} />\n}\n```\n\nThis is probably not a \"realistic\" example, but in a practical sense, it is a nightmare to manage\n\nSo people turn to other libraries like zustand\n\nhere you use something similar to\n\n\n\n```tsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return \u003Ch1>{bears} around here ...\u003C/h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return \u003Cbutton onClick={increasePopulation}>one up\u003C/button>\n}\n``` \n\nThis is indeed better, since it makes the stores \"global\" instead of something chained down\n\n\nSvelte manages this via svelte stores, which I feel are alot alot more intuitive, and because they come pre-packaged in svelte, it is one less additional library to use\n\n```svelte\nimport {writable} from 'svelte/store'\n\nlet count = writable(0)\n\nfunction increment() {\n    count.update((value) => value + 1)\n}\n```\n\nand when using them in html, you can use the $ prefix to access the store\n\n```svelte\n\u003Ch1>{$count}\u003C/h1>\n\u003Cbutton on:click={increment}>Increment\u003C/button>\n```\n\nthat's it, ta-da!\n\nTo be honest, I do like jot-ai atoms which come close to this, but I didn't enjoy having to learn jot-ai to use it, and I don't enjoy the \"useAtom\" syntax\n\nHere's an example of jot-ai atoms for completeness's sake\n\n```tsx\nimport { atom } from \"jotai\"\n\nconst countAtom = atom(0)\n\nfunction increment() {\n    countAtom.update((value) => value + 1)\n}\n```\n\nto use this in a react component\n\n```tsx\nimport { useAtom } from \"jotai\"\n\nfunction App() {\n    const [count, setCount] = useAtom(countAtom)\n    return (\n        \u003Cdiv>\n            \u003Ch1>{count}\u003C/h1>\n            \u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n        \u003C/div>\n    )\n}\n````\n\n\n","/_app/immutable/assets/icon.CapEkUyB.jpg","\u003Ch2 id=\"whyifeelsvelteisbetterthanreactitsstatemanagement\">Why I feel Svelte is better than React (it's state management)\u003C/h2>\n\u003Cp>The developer experience of svelte is miles better than react, apart from pre-planned request layout structures and less cognitive work on that area\u003C/p>\n\u003Cp>And that's it, React projects get into state-hell very easily, and then users are forced to use alternative options such as https://github.com/pmndrs/zustand or https://jotai.org/\u003C/p>\n\u003Cp>This is due to the fact that react by default does not have any \"Global state storage\" by default, so unless you are relying on the above mentioned libary – you likely will have to create a huge amount of inheritance and prop-drilling - which quickly gets messy and becomes a maintenance nightmare\u003C/p>\n\u003Cp>for example, lets say you have a simple react function with children\u003C/p>\n\u003Cpre class=\"tsx language-tsx\">\u003Ccode class=\"hljs tsx language-tsx\">\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">App\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> (\n        \u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>App\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">Child\u003C/span> /&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\u003C/span>\n    )\n}\n\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">Child\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> (\n        \u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h2\u003C/span>&gt;\u003C/span>Child\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h2\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\u003C/span>\n    )\n}\n\u003C/code>\u003C/pre>\n\u003Cp>and the way you use it is\u003C/p>\n\u003Cpre class=\"tsx language-tsx\">\u003Ccode class=\"hljs tsx language-tsx\">\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">App\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> [count, setCount] = \u003Cspan class=\"hljs-title function_\">useState\u003C/span>(\u003Cspan class=\"hljs-number\">0\u003C/span>)\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> (\n        \u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>App\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">Child\u003C/span> \u003Cspan class=\"hljs-attr\">count\u003C/span>=\u003Cspan class=\"hljs-string\">{count}\u003C/span> \u003Cspan class=\"hljs-attr\">setCount\u003C/span>=\u003Cspan class=\"hljs-string\">{setCount}\u003C/span> /&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\u003C/span>\n    )\n}\n\u003C/code>\u003C/pre>\n\u003Cp>now imagine doing this for a complex state driven project, it clearly doesn't work\u003C/p>\n\u003Cpre class=\"tsx language-tsx\">\u003Ccode class=\"hljs tsx language-tsx\">\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">App\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> [count, setCount] = \u003Cspan class=\"hljs-title function_\">useState\u003C/span>(\u003Cspan class=\"hljs-number\">0\u003C/span>)\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> [place, setPlace] = \u003Cspan class=\"hljs-title function_\">useState\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;alaska&quot;\u003C/span>)\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> [name, setName] = \u003Cspan class=\"hljs-title function_\">useState\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;river&quot;\u003C/span>)\n    \u003Cspan class=\"hljs-comment\">// 30 different states to load from\u003C/span>\n\n    \u003Cspan class=\"hljs-comment\">// 30 different props to pass down\u003C/span>\n    &lt;\u003Cspan class=\"hljs-title class_\">UserRepresentation\u003C/span> count={count} setCount={setCount}, place={place} setPlace={setPlace}, name={name} setName={setName} /&gt;\n}\n\u003C/code>\u003C/pre>\n\u003Cp>This is probably not a \"realistic\" example, but in a practical sense, it is a nightmare to manage\u003C/p>\n\u003Cp>So people turn to other libraries like zustand\u003C/p>\n\u003Cp>here you use something similar to\u003C/p>\n\u003Cpre class=\"tsx language-tsx\">\u003Ccode class=\"hljs tsx language-tsx\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { create } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;zustand&#x27;\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> useBearStore = \u003Cspan class=\"hljs-title function_\">create\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">set\u003C/span>) =&gt;\u003C/span> ({\n  \u003Cspan class=\"hljs-attr\">bears\u003C/span>: \u003Cspan class=\"hljs-number\">0\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">increasePopulation\u003C/span>: \u003Cspan class=\"hljs-function\">() =&gt;\u003C/span> \u003Cspan class=\"hljs-title function_\">set\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">state\u003C/span>) =&gt;\u003C/span> ({ \u003Cspan class=\"hljs-attr\">bears\u003C/span>: state.\u003Cspan class=\"hljs-property\">bears\u003C/span> + \u003Cspan class=\"hljs-number\">1\u003C/span> })),\n  \u003Cspan class=\"hljs-attr\">removeAllBears\u003C/span>: \u003Cspan class=\"hljs-function\">() =&gt;\u003C/span> \u003Cspan class=\"hljs-title function_\">set\u003C/span>({ \u003Cspan class=\"hljs-attr\">bears\u003C/span>: \u003Cspan class=\"hljs-number\">0\u003C/span> }),\n}))\n\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">BearCounter\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> bears = \u003Cspan class=\"hljs-title function_\">useBearStore\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">state\u003C/span>) =&gt;\u003C/span> state.\u003Cspan class=\"hljs-property\">bears\u003C/span>)\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>{bears} around here ...\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\u003C/span>\n}\n\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">Controls\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> increasePopulation = \u003Cspan class=\"hljs-title function_\">useBearStore\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">state\u003C/span>) =&gt;\u003C/span> state.\u003Cspan class=\"hljs-property\">increasePopulation\u003C/span>)\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">button\u003C/span> \u003Cspan class=\"hljs-attr\">onClick\u003C/span>=\u003Cspan class=\"hljs-string\">{increasePopulation}\u003C/span>&gt;\u003C/span>one up\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">button\u003C/span>&gt;\u003C/span>\u003C/span>\n}\n\u003C/code>\u003C/pre>\n\u003Cp>This is indeed better, since it makes the stores \"global\" instead of something chained down\u003C/p>\n\u003Cp>Svelte manages this via svelte stores, which I feel are alot alot more intuitive, and because they come pre-packaged in svelte, it is one less additional library to use\u003C/p>\n\u003Cpre class=\"svelte language-svelte\">\u003Ccode class=\"hljs svelte language-svelte\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> {writable} from \u003Cspan class=\"hljs-string\">&#x27;svelte/store&#x27;\u003C/span>\n\nlet \u003Cspan class=\"hljs-built_in\">count\u003C/span> = writable(\u003Cspan class=\"hljs-number\">0\u003C/span>)\n\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">increment\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    \u003Cspan class=\"hljs-built_in\">count\u003C/span>.update(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value\u003C/span>) =&gt;\u003C/span> value + \u003Cspan class=\"hljs-number\">1\u003C/span>)\n}\n\u003C/code>\u003C/pre>\n\u003Cp>and when using them in html, you can use the $ prefix to access the store\u003C/p>\n\u003Cpre class=\"svelte language-svelte\">\u003Ccode class=\"hljs svelte language-svelte\">\u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\u003C/span>\u003Cspan class=\"hljs-template-variable\">{$count}\u003C/span>\u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">button\u003C/span> \u003Cspan class=\"hljs-attr\">on:click\u003C/span>=\u003C/span>\u003C/span>\u003Cspan class=\"hljs-template-variable\">{increment}\u003C/span>\u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&gt;\u003C/span>Increment\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">button\u003C/span>&gt;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>that's it, ta-da!\u003C/p>\n\u003Cp>To be honest, I do like jot-ai atoms which come close to this, but I didn't enjoy having to learn jot-ai to use it, and I don't enjoy the \"useAtom\" syntax\u003C/p>\n\u003Cp>Here's an example of jot-ai atoms for completeness's sake\u003C/p>\n\u003Cpre class=\"tsx language-tsx\">\u003Ccode class=\"hljs tsx language-tsx\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { atom } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&quot;jotai&quot;\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> countAtom = \u003Cspan class=\"hljs-title function_\">atom\u003C/span>(\u003Cspan class=\"hljs-number\">0\u003C/span>)\n\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">increment\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    countAtom.\u003Cspan class=\"hljs-title function_\">update\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value\u003C/span>) =&gt;\u003C/span> value + \u003Cspan class=\"hljs-number\">1\u003C/span>)\n}\n\u003C/code>\u003C/pre>\n\u003Cp>to use this in a react component\u003C/p>\n\u003Cpre class=\"tsx language-tsx\">\u003Ccode class=\"hljs tsx language-tsx\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { useAtom } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&quot;jotai&quot;\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">App\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> [count, setCount] = \u003Cspan class=\"hljs-title function_\">useAtom\u003C/span>(countAtom)\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> (\n        \u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>{count}\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">button\u003C/span> \u003Cspan class=\"hljs-attr\">onClick\u003C/span>=\u003Cspan class=\"hljs-string\">{()\u003C/span> =&gt;\u003C/span> setCount(count + 1)}&gt;Increment\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">button\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\u003C/span>\n    )\n}\n\u003C/code>\u003C/pre>\n\u003Cp>`\u003C/p>",{"shortSummary":6,"author":7,"dated":8,"title":6,"icon":9},"Why I feel Svelte is better than React (it's state management)","River / Aditya Shankar","2025-05-24","icon.jpg"],"uses":{"params":["num"]}}]}
